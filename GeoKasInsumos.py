# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoKasInsumos
                                 A QGIS plugin
 GeoKas Insumos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-27
        git sha              : $Format:%H$
        copyright            : (C) 2025 by GeoKas
        email                : contacto@geokas.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QUrl, Qt
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QComboBox, QCheckBox, QTableWidgetItem  # Add import for QComboBox, QCheckBox, and QTableWidgetItem
from qgis.core import QgsRasterLayer, QgsProject, QgsWkbTypes  # Import QgsRasterLayer, QgsProject, and QgsWkbTypes

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .GeoKasInsumos_dialog import GeoKasInsumosDialog
from .GeoKasInsumos_dialog_2 import GeoKasInsumosDialog_2, GeoKasInsumosDockableDialog2
from .GeoKasInsumos_dialog_3 import GeoKasInsumosDialog_3, GeoKasInsumosDockableDialog3
import os.path
import os
from qgis.PyQt.QtWidgets import QFrame
from qgis.PyQt.QtWebKitWidgets import QWebView
import requests
from datetime import datetime
from qgis.core import QgsGeometry
from qgis.gui import QgsRubberBand  # Import QgsRubberBand


class GeoKasInsumos:
    """QGIS Plugin Implementation."""

    license_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), "license.txt")
    view_configuration_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), "view_configuration.txt")
    ui_confuration_active = False
    array_insumos = []
    array_aoi = []
    array_rubber_bands = []
    array_xyzs = []
    license_key = ""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeoKasInsumos_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GeoKas Insumos')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeoKasInsumos', message)
    
    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # Create a new toolbar for the plugin
        self.toolbar = self.iface.addToolBar("GeoKas Insumos")
        self.toolbar.setObjectName("GeoKasInsumosToolbar")

        icon_path = ':/plugins/GeoKasInsumos/icon.png'

        current_directory = os.path.dirname(os.path.realpath(__file__))
        eye_path = current_directory + "/icon_eye.png"

        self.add_action(
            eye_path,
            text=self.tr(u'Visualizar Insumos'),
            callback=self.viewInsumos,
            parent=self.iface.mainWindow(),
            add_to_toolbar=False  # Do not add to default toolbar
        )

        self.toolbar.addAction(
            self.actions[-1]
        )  # Add the action to the custom toolbar

        

        # Add combo box to the custom toolbar
        self.combo_box = QComboBox(self.iface.mainWindow())
        self.combo_box.currentTextChanged.connect(self.cambioComboBoxZona)
        self.toolbar.addWidget(self.combo_box)

        self.check_box = QCheckBox(self.iface.mainWindow())
        self.check_box.setText("Mostrar AOI's")
        self.check_box.stateChanged.connect(self.cambioMostrarAOI)
        self.toolbar.addWidget(self.check_box)


        self.combo_box2 = QComboBox(self.iface.mainWindow())
        self.combo_box2.currentTextChanged.connect(self.cambioComboBoxXYZ)
        self.toolbar.addWidget(self.combo_box2)

        self.check_license()

        configure_path = current_directory + "/icon_setting.png"

        self.add_action(
            configure_path,
            text=self.tr(u'Configurar Insumos'),
            callback=self.configure,
            parent=self.iface.mainWindow(),
            add_to_toolbar=False  # Do not add to default toolbar
        )

        self.toolbar.addAction(
            self.actions[-1]
        )  # Add the action to the custom toolbar

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item, icon, and custom toolbar from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GeoKas Insumos'),
                action)
            self.iface.removeToolBarIcon(action)

        # Remove custom toolbar and its widgets
        if hasattr(self, 'toolbar'):
            self.toolbar.clear()  # Clear all widgets and actions from the toolbar
            self.iface.mainWindow().removeToolBar(self.toolbar)  # Remove the toolbar from the main window
            self.toolbar = None

    def cambioComboBoxZona(self, text):
        print("Opcion seleccionada: "+text)
        index = next((i for i, item in enumerate(self.array_aoi) if item["nombre"] == text), -1)
        if index != -1:
            print(f"Index found: {index}")
            try:
                geometry_aoi = QgsGeometry.fromWkt(self.array_aoi[index]["geometry"])
                print("Geometry created successfully")
                if geometry_aoi.isEmpty():
                    print("Geometry is empty")
                else:
                    print("Geometry created successfully")
                    extent_aoi = geometry_aoi.boundingBox()
                    self.iface.mapCanvas().setExtent(extent_aoi)
                    self.iface.mapCanvas().refresh()
                    # Perform operations with the geometry here
            except Exception as e:
                print(f"Error creating geometry: {e}")
        else:
            print("Value not found")
    
    def cambioComboBoxXYZ(self, text):
        print("Opcion seleccionada: "+text)


        index = next((i for i, item in enumerate(self.array_xyzs) if item["nombre"] == text), -1)
        if index != -1 and index!=0:
            print(f"Index found: {index}")
            layer = QgsRasterLayer(
                "type=xyz&url="+self.array_xyzs[index]["url"]+"?token="+self.license_key+"&zmax="+str(self.array_xyzs[index]["zmax"]),
                self.array_xyzs[index]["nombre"],
                "wms"
            )
            if not layer.isValid():
                print("Failed to load "+self.array_xyzs[index]["nombre"]+" layer")
            else:
                QgsProject.instance().addMapLayer(layer)
        else:
            print("Value not found")




        if text == "XYZ Jamundi":
            layer = QgsRasterLayer(
                "type=xyz&url=https://xyz-jamundi.geokas.com.co/Z{z}/{y}/{X}.jpg?token=asbdasjdbas&zmax=23",
                "XYZ Jamundi",
                "wms"
            )
            if not layer.isValid():
                print("Failed to load XYZ Jamundi layer")
            else:
                QgsProject.instance().addMapLayer(layer)
        elif text == "XYZ Bruselas":
            layer = QgsRasterLayer(
                "type=xyz&url=https://2d-bruselas-pit-col.falconprecision.co/Z{z}/{y}/{X}.png?token=asbdasjdbas&zmax=23",
                "XYZ Bruselas",
                "wms"
            )
            if not layer.isValid():
                print("Failed to load XYZ Bruselas layer")
            else:
                QgsProject.instance().addMapLayer(layer)

    def on_license_changed(self):
        if len(self.dlg.lineEditLicencia.text()) > 0:
            self.dlg.buttonVerificar.setEnabled(True)
        else:
            self.dlg.buttonVerificar.setEnabled(False)

    def button_verificar_clicked(self):
        if self.ui_confuration_active:
            print("*****Iniciando request")

            self.dlg.labelNombreLicencia.setText("Verificando licencia...")
            
            self.dlg.labelCliente.setText("")

            self.dlg.labelDuracionLicencia.setText("")

            self.dlg.lineEditLicencia.setEnabled(False)
            self.dlg.buttonVerificar.setEnabled(False)
            
            self.dlg.repaint()

            self.write_license()

    def cambioMostrarAOI(self, state):
        if state == 2:
            print("State changed: " + str(state))

            for rubber_band in self.array_rubber_bands:
                rubber_band.show()

        elif state == 0:
            print("State changed: " + str(state))

            for rubber_band in self.array_rubber_bands:
                rubber_band.hide()

    def viewInsumos(self):
        # Read the view_configuration.txt file and set boolean variables
        view_360 = False
        view_3D = False
        view_point_cloud = False

        if os.path.exists(self.view_configuration_file):
            with open(self.view_configuration_file, 'r') as file:
                for line in file:
                    if "360: Active" in line:
                        view_360 = True
                    elif "3D: Active" in line:
                        view_3D = True
                    elif "Point_Cloud: Active" in line:
                        view_point_cloud = True


        if hasattr(self, 'dlg_2') and self.dlg_2 is not None:
            self.iface.mainWindow().removeDockWidget(self.dlg_2)
            self.dlg_2.close()
            self.dlg_2 = None
        if hasattr(self, 'dlg_3') and self.dlg_3 is not None:
            self.iface.mainWindow().removeDockWidget(self.dlg_3)
            self.dlg_3.close()
            self.dlg_3 = None
        if view_3D:
            if not hasattr(self, 'dlg_2') or self.dlg_2 is None:
                self.dlg_2 = GeoKasInsumosDockableDialog2()
                    
            # Anclar el DockWidget
            self.iface.mainWindow().addDockWidget(Qt.RightDockWidgetArea, self.dlg_2)

            self.dlg_2.show()
            #self.dlg_2.contenedor.clear()  # Clear previous widgets in the container
            web_view = QWebView()
            web_view.setUrl(QUrl("https://3d-jamundi.geokas.com.co/App/?scene=Jamundi&cX=-974.1265&cY=1136.1052&cZ=1170.6126&upX=0.0000&upY=0.0000&upZ=1.0000&tX=-972.6563&tY=1161.6604&tZ=1008.4842"))
            # Remove all widgets from the container before adding a new one
            while self.dlg_2.dialog_widget.contenedor.count() > 0:
                widget_to_remove = self.dlg_2.dialog_widget.contenedor.takeAt(0).widget()
                if widget_to_remove is not None:
                    widget_to_remove.deleteLater()
            # Add the new widget
            self.dlg_2.dialog_widget.contenedor.addWidget(web_view)

        if view_360:
            if not hasattr(self, 'dlg_3') or self.dlg_3 is None:
                self.dlg_3 = GeoKasInsumosDockableDialog3()
                    
            # Anclar el DockWidget
            self.iface.mainWindow().addDockWidget(Qt.RightDockWidgetArea, self.dlg_3)

            self.dlg_3.show()
            #self.dlg_2.contenedor.clear()  # Clear previous widgets in the container
            web_view3 = QWebView()
            web_view3.setUrl(QUrl("https://www.google.com"))
            # Remove all widgets from the container before adding a new one
            while self.dlg_3.dialog_widget.contenedor.count() > 0:
                widget_to_remove = self.dlg_3.dialog_widget.contenedor.takeAt(0).widget()
                if widget_to_remove is not None:
                    widget_to_remove.deleteLater()

            # Add the new widget
            self.dlg_3.dialog_widget.contenedor.addWidget(web_view3)

    def write_license(self):
        if not os.path.exists(self.license_file):
            # Si el archivo no existe, lo creamos y escribimos algo en él
            with open(self.license_file, 'w') as file:
                file.write(self.dlg.lineEditLicencia.text())
        else:
            # Si el archivo ya existe, lo leemos
            with open(self.license_file, 'r') as file:
                content = file.read()
            if content != self.dlg.lineEditLicencia.text():
                os.remove(self.license_file)
                with open(self.license_file, 'w') as file:
                    file.write(self.dlg.lineEditLicencia.text())
        self.check_license()

    def check_license(self):
        """
        Check if the license file exists and read its content.
        If the license is valid, enable the checkboxes and set the labels.
        If the license is invalid, disable the checkboxes and clear the labels.
        """


        base_url="https://187b-190-90-234-21.ngrok-free.app"
        url_restante_licencia="/api/plugins/insumos/check-license?token="
        self.license_key=""
        self.array_rubber_bands = []
        self.array_aoi = []
        self.array_aoi.append({"nombre": "Ir a...", "geometry": ""})
        self.array_xyzs = []
        self.array_xyzs.append({"nombre": "Agregar Basemap...", "url": "", "zmax": ""})
        if os.path.exists(self.license_file):
            with open(self.license_file, 'r') as file:
                content = file.read()
                self.license_key = content
                # TODO: Eliminar caracteres extras adelante y atras de la licencia
                
            try:
                response = requests.get(base_url+url_restante_licencia+self.license_key, timeout=60)
                license_data = response.json()
                #FIXME: Solucionar cuando no hay servidor activo
                if response.status_code == 200:

                    self.iface.messageBar().pushSuccess(
                        "Validado",
                        "Licencia verificada correctamente",
                    )
                    print("********Iniciando request")
                    self.array_insumos = []

                    for proyecto in license_data["data"]["licencia"]["proyectos"]:
                        for insumo_3d in proyecto["3ds"]:
                            new_insumo = {"nombre": insumo_3d["nombre"], "tipo": "Modelo 3D", "fecha": str(datetime.fromisoformat(insumo_3d["created_at"].replace("Z", "-05:00"))), "url": insumo_3d["url"], "id": insumo_3d["id"]}
                            self.array_insumos.append(new_insumo)
                        for insumo_360 in proyecto["360s"]:
                            new_insumo = {"nombre": insumo_360["nombre"], "tipo": "360", "fecha": str(datetime.fromisoformat(insumo_360["created_at"].replace("Z", "-05:00"))), "url": insumo_360["url"], "id": insumo_360["id"]}
                            self.array_insumos.append(new_insumo)
                        for aoi_sended in proyecto["aois"]:
                            new_aoi ={"nombre": aoi_sended["nombre"], "geometry": aoi_sended["polygon"]}
                            self.array_aoi.append(new_aoi)

                            canvas = self.iface.mapCanvas()
                            geometry_rubber = QgsGeometry.fromWkt(aoi_sended["polygon"])
                            if not geometry_rubber.isEmpty():
                                rubber_band = QgsRubberBand(canvas, QgsWkbTypes.PolygonGeometry)
                                rubber_band.setToGeometry(geometry_rubber, None)
                                rubber_band.setFillColor(QColor(0, 0, 0, 0))  # Transparent fill
                                rubber_band.setLineStyle(Qt.DotLine)  # Dotted line style
                                rubber_band.setStrokeColor(QColor(255, 0, 0, 255))  # Set the stroke color to red
                                rubber_band.setWidth(2)
                                rubber_band.hide()

                                self.array_rubber_bands.append(rubber_band)

                        for xyz_sended in proyecto["xyzs"]:
                            new_xyz ={"nombre": xyz_sended["nombre"], "url": xyz_sended["url"], "zmax": xyz_sended["max_zoom"]}
                            self.array_xyzs.append(new_xyz)
                    
                    if self.ui_confuration_active:
                        self.dlg.buttonVerificar.setEnabled(True)
                        self.dlg.lineEditLicencia.setEnabled(True)
                        self.dlg.labelNombreLicencia.setText(license_data["data"]["licencia"]["nombre"])
                        self.dlg.labelCliente.setText(license_data["data"]["licencia"]["cliente"]["nombre"])
                        #TODO: Mejorar semantica duracion licencia
                        days_remaining = (datetime.fromisoformat(license_data["data"]["licencia"]["fecha_fin"]) - datetime.now().astimezone()).days
                        self.dlg.labelDuracionLicencia.setText("Desde "+str(datetime.fromisoformat(license_data["data"]["licencia"]["fecha_inicio"]).date())+" hasta "+str(datetime.fromisoformat(license_data["data"]["licencia"]["fecha_fin"]).date())+". Días restantes: "+str(days_remaining))
                        self.dlg.lineEditLicencia.setText(self.license_key)
                        self.dlg.check360.setEnabled(True)
                        self.dlg.checkModelo_3D.setEnabled(True)
                        self.dlg.checkNubePuntos.setEnabled(True)
                else:
                    print("Licencia invalida")
                    self.iface.messageBar().pushCritical(
                        "Error",
                        license_data["error"],
                    )

                    if os.path.exists(self.license_file):
                        os.remove(self.license_file)
                    if os.path.exists(self.view_configuration_file):
                        os.remove(self.view_configuration_file)
                    
                    if self.ui_confuration_active:
                        print("ui activo")
                        self.dlg.labelNombreLicencia.setText(license_data["error"])
                        self.dlg.labelDuracionLicencia.setText("")
                        self.dlg.check360.setEnabled(False)
                        self.dlg.checkModelo_3D.setEnabled(False)
                        self.dlg.checkNubePuntos.setEnabled(False)
                
            except requests.exceptions.Timeout:
                self.iface.messageBar().pushCritical(
                    "Error",
                    "No se pudo acceder al servidor de GeoKas",
                )
                return
            except requests.RequestException as e:
                print("An error occurred while verifying the license:", e)
        else:
            if self.ui_confuration_active:
                self.dlg.labelNombreLicencia.setText("Sin licencia")
                self.dlg.labelDuracionLicencia.setText("")
                self.dlg.lineEditLicencia.setText("")
                self.dlg.check360.setEnabled(False)
                self.dlg.checkModelo_3D.setEnabled(False)

        nombres_aoi = [aoi["nombre"] for aoi in self.array_aoi]
        self.combo_box.clear()
        self.combo_box.addItems(nombres_aoi)

        nombres_xyz = [xyz["nombre"] for xyz in self.array_xyzs]
        self.combo_box2.clear()
        self.combo_box2.addItems(nombres_xyz)

        if self.ui_confuration_active:
            self.dlg.buttonVerificar.setEnabled(True)
            self.dlg.lineEditLicencia.setEnabled(True)
            self.dlg.repaint()
    
    def insumo_seleccionado(self, state):
        row = self.dlg.tableInsumos.indexAt(self.dlg.tableInsumos.sender().pos()).row()
        
        if os.path.exists(self.view_configuration_file):
            with open(self.view_configuration_file, 'r') as file:
                lines = file.readlines()

            with open(self.view_configuration_file, 'w') as file:
                for line in lines:
                    if not line.startswith(str(self.array_insumos[row]["id"])):
                        file.write(line)
            with open(self.view_configuration_file, 'a') as file:
                if state == 2:
                    file.write(f"{str(self.array_insumos[row]['id'])}-{self.array_insumos[row]['tipo']}: Active\n")
                else:
                    file.write(f"{str(self.array_insumos[row]['id'])}-{self.array_insumos[row]['tipo']}: Inactive\n")
        else:
            with open(self.view_configuration_file, 'w') as file:
                if state == 2:
                    file.write(f"{str(self.array_insumos[row]['id'])}-{self.array_insumos[row]['tipo']}: Active\n")
                else:
                    file.write(f"{str(self.array_insumos[row]['id'])}-{self.array_insumos[row]['tipo']}: Inactive\n")

    def configure(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        if not hasattr(self, 'dlg') or self.dlg is None:
            self.dlg = GeoKasInsumosDialog()


        self.dlg.lineEditLicencia.textChanged.connect(self.on_license_changed)
        self.dlg.buttonVerificar.clicked.connect(self.button_verificar_clicked)

        self.dlg.tableInsumos.clearContents()
        self.dlg.tableInsumos.setRowCount(0)
        self.dlg.tableInsumos.setColumnCount(4)

        # Create a provisional array to save the "nombres" that are active
        active_id = []

        # Check the view_configuration_file for active items
        if os.path.exists(self.view_configuration_file):
            with open(self.view_configuration_file, 'r') as file:
                for line in file:
                    if "Active" in line:
                        active_id.append(line.split(":")[0].strip())
        print(active_id)
        for index, insumo in enumerate(self.array_insumos):
            self.dlg.tableInsumos.insertRow(index)
            checkbox = QCheckBox()
            key_id_tipo= str(insumo["id"])+"-"+insumo["tipo"]
            if key_id_tipo in active_id:
                checkbox.setChecked(True)
            self.dlg.tableInsumos.setCellWidget(index, 0, checkbox)
            checkbox.setStyleSheet("margin:auto;")
            checkbox.stateChanged.connect(self.insumo_seleccionado)

            self.dlg.tableInsumos.setItem(index, 1, QTableWidgetItem(insumo["nombre"]))
            self.dlg.tableInsumos.setItem(index, 2, QTableWidgetItem(insumo["tipo"]))
            self.dlg.tableInsumos.setItem(index, 3, QTableWidgetItem(insumo["fecha"]))

        

        self.ui_confuration_active = True
        

        self.check_license()

        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Create a text file with the information of the active checkboxes
            with open(self.view_configuration_file, 'w') as file:
                if self.dlg.check360.isChecked():
                    file.write("360: Active\n")
                else:
                    file.write("360: Inactive\n")

                if self.dlg.checkModelo_3D.isChecked():
                    file.write("3D: Active\n")
                else:
                    file.write("3D: Inactive\n")

                if self.dlg.checkNubePuntos.isChecked():
                    file.write("Point_Cloud: Active\n")
                else:
                    file.write("Point_Cloud: Inactive\n")
            pass
